// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	employee "go-grpc/internal/employee"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// GetEmployeesWithFilter provides a mock function with given fields: ctx, page, limit, name
func (_m *MockService) GetEmployeesWithFilter(ctx context.Context, page int, limit int, name string) ([]*employee.Employee, int64, error) {
	ret := _m.Called(ctx, page, limit, name)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeesWithFilter")
	}

	var r0 []*employee.Employee
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) ([]*employee.Employee, int64, error)); ok {
		return rf(ctx, page, limit, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) []*employee.Employee); ok {
		r0 = rf(ctx, page, limit, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*employee.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) int64); ok {
		r1 = rf(ctx, page, limit, name)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, string) error); ok {
		r2 = rf(ctx, page, limit, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
