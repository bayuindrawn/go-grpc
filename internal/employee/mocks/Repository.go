// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	employee "go-grpc/internal/employee"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CountWithFilter provides a mock function with given fields: ctx, name
func (_m *MockRepository) CountWithFilter(ctx context.Context, name string) (int64, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CountWithFilter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWithFilter provides a mock function with given fields: ctx, page, limit, name
func (_m *MockRepository) FindWithFilter(ctx context.Context, page int, limit int, name string) ([]*employee.Employee, error) {
	ret := _m.Called(ctx, page, limit, name)

	if len(ret) == 0 {
		panic("no return value specified for FindWithFilter")
	}

	var r0 []*employee.Employee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) ([]*employee.Employee, error)); ok {
		return rf(ctx, page, limit, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string) []*employee.Employee); ok {
		r0 = rf(ctx, page, limit, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*employee.Employee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string) error); ok {
		r1 = rf(ctx, page, limit, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
